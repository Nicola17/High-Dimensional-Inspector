MACRO(ADD_PROJECT Name Sources MocSources)
    #MESSAGE( STATUS "${MocSources}")
    add_executable (${Name} ${Sources} ${MocSources})

    target_link_libraries (${Name} hdianalytics)
    target_link_libraries (${Name} hdidimensionalityreduction)
    target_link_libraries (${Name} hdiclustering)
    target_link_libraries (${Name} hdidata)
    target_link_libraries (${Name} hdivisualization)
    target_link_libraries (${Name} hdiutils)
    target_link_libraries (${Name} Qt5::Widgets)
    target_link_libraries (${Name} Qt5::OpenGL)
    target_link_libraries (${Name} Qt5::WebKit)
    target_link_libraries (${Name} Qt5::WebKitWidgets)
    qt5_use_modules(${Name} WebKitWidgets)
    IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
            target_link_libraries (${Name} Opengl32.lib)
	    target_link_libraries (${Name} "$ENV{FLANN_DIR}/lib/flann_cpp_s.lib")
    ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
            target_link_libraries(${Name} ${OPENGL_LIBRARIES})
    ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

    MESSAGE( STATUS "Command line project: " ${Name} )

    set_target_properties(${Name} PROPERTIES FOLDER "Applications/Command line tools")
ENDMACRO()

########################################################################################################

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

include_directories ("${CMAKE_SOURCE_DIR}")
include_directories ("${CMAKE_CURRENT_BINARY_DIR}/../../hdi/visualization")

set(CMAKE_INCLUDE_CURRENT_DIR ON)
find_package(Qt5Widgets REQUIRED)
find_package(Qt5OpenGL REQUIRED)
find_package(Qt5WebKit REQUIRED)
IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
        find_package(OpenGL REQUIRED)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

if(APPLE)
else(APPLE)
    find_package(OpenMP REQUIRED)
    if (OPENMP_FOUND)
	message (STATUS "OpenMP found")
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    endif()
endif(APPLE)

file(GLOB VisualizationQObjHeaderFiles ${CMAKE_SOURCE_DIR}/hdi/visualization/*qobj.h)
file(GLOB AnalyticsQObjHeaderFiles ${CMAKE_SOURCE_DIR}/hdi/analytics/*qobj.h)
qt5_wrap_cpp(MocSources ${AnalyticsQObjHeaderFiles} ${VisualizationQObjHeaderFiles})
qt5_add_resources(Resources "../shared_resources/shared_resources.qrc")

add_executable(tsne_cmd tsne_cmd.cpp)
add_executable(atsne_cmd atsne_cmd.cpp)
add_executable(tsne_distance_matrix_cmd tsne_distance_matrix_cmd.cpp)
ADD_PROJECT(hsne_cmd hsne_cmd.cpp "${MocSources};${Resources}")
ADD_PROJECT(simple_embedding_viewer simple_embedding_viewer.cpp "${MocSources};${Resources}")
add_executable(csv_2_bin csv_2_bin.cpp)
add_executable(multiple_csv_2_bin multiple_csv_2_bin.cpp)
add_executable(mnist_2_data mnist_2_data.cpp)
add_executable(timit_2_data timit_2_data.cpp)
add_executable(cifar_2_data cifar_2_data.cpp)
add_executable(bin_2_data bin_2_data.cpp)
ADD_PROJECT(pex_viewer pex_viewer.cpp "${MocSources};${Resources}")


target_link_libraries(atsne_cmd hdidimensionalityreduction)
target_link_libraries(atsne_cmd hdiutils)
target_link_libraries(atsne_cmd hdidata)
target_link_libraries(atsne_cmd Qt5::Widgets)

target_link_libraries(tsne_cmd hdidimensionalityreduction)
target_link_libraries(tsne_cmd hdiutils)
target_link_libraries(tsne_cmd hdidata)
target_link_libraries(tsne_cmd Qt5::Widgets)

target_link_libraries(tsne_distance_matrix_cmd hdidimensionalityreduction)
target_link_libraries(tsne_distance_matrix_cmd hdiutils)
target_link_libraries(tsne_distance_matrix_cmd hdidata)
target_link_libraries(tsne_distance_matrix_cmd Qt5::Widgets)


target_link_libraries(simple_embedding_viewer hdidimensionalityreduction)
target_link_libraries(simple_embedding_viewer hdiutils)
target_link_libraries(simple_embedding_viewer hdivisualization)
target_link_libraries(simple_embedding_viewer hdidata)
target_link_libraries(simple_embedding_viewer Qt5::Widgets)
target_link_libraries(simple_embedding_viewer Qt5::OpenGL)
IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	target_link_libraries(simple_embedding_viewer Opengl32.lib)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	target_link_libraries(simple_embedding_viewer ${OPENGL_LIBRARIES})
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")


target_link_libraries(csv_2_bin hdiutils)
target_link_libraries(multiple_csv_2_bin hdiutils)
target_link_libraries(mnist_2_data hdiutils)
target_link_libraries(timit_2_data hdiutils)
target_link_libraries(timit_2_data hdidata)
target_link_libraries(cifar_2_data hdiutils)
target_link_libraries(cifar_2_data hdidata)
target_link_libraries(bin_2_data hdiutils)

set_target_properties(tsne_cmd PROPERTIES FOLDER "Applications/Command line tools")
set_target_properties(atsne_cmd PROPERTIES FOLDER "Applications/Command line tools")
set_target_properties(tsne_distance_matrix_cmd PROPERTIES FOLDER "Applications/Command line tools")
#set_target_properties(hsne_cmd PROPERTIES FOLDER "Applications/Command line tools")
set_target_properties(simple_embedding_viewer PROPERTIES FOLDER "Applications/Command line tools")
set_target_properties(csv_2_bin PROPERTIES FOLDER "Applications/Command line tools")
set_target_properties(multiple_csv_2_bin PROPERTIES FOLDER "Applications/Command line tools")
set_target_properties(mnist_2_data PROPERTIES FOLDER "Applications/Command line tools")
set_target_properties(timit_2_data PROPERTIES FOLDER "Applications/Command line tools")
set_target_properties(cifar_2_data PROPERTIES FOLDER "Applications/Command line tools")
set_target_properties(bin_2_data PROPERTIES FOLDER "Applications/Command line tools")
