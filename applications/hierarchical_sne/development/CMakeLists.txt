MACRO(ADD_PROJECT Name Sources MocSources)
        #MESSAGE( STATUS "${MocSources}")
	add_executable (${Name} ${Sources} ${MocSources})  

	target_link_libraries (${Name} hdianalytics)
	target_link_libraries (${Name} hdidimensionalityreduction)
	target_link_libraries (${Name} hdiclustering)
	target_link_libraries (${Name} hdidata)
	target_link_libraries (${Name} hdivisualization)
	target_link_libraries (${Name} hdiutils)
	target_link_libraries (${Name} Qt5::Widgets)
	target_link_libraries (${Name} Qt5::OpenGL)
	target_link_libraries (${Name} Qt5::WebKit)
        target_link_libraries (${Name} Qt5::WebKitWidgets)
	qt5_use_modules(${Name} WebKitWidgets)
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
		target_link_libraries (${Name} Opengl32.lib)
		target_link_libraries (${Name} "$ENV{FLANN_DIR}/lib/flann_cpp_s.lib")
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
		target_link_libraries(${Name} ${OPENGL_LIBRARIES})
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

	MESSAGE( STATUS "HSNE development project: " ${Name} )
        #MESSAGE( STATUS "            Source Files: " ${Sources} )
        #MESSAGE( STATUS "            Moc Source Files: " ${MocSources} )

	set_target_properties(${Name} PROPERTIES FOLDER "Applications/Hierarchical SNE/Development")
ENDMACRO()

MACRO(ADD_CUDA_PROJECT Name Sources MocSources)
	CUDA_ADD_EXECUTABLE (${Name} ${Sources} ${MocSources})  

	target_link_libraries (${Name} hdianalytics)
	target_link_libraries (${Name} hdidimensionalityreduction)
	target_link_libraries (${Name} hdiclustering)
	target_link_libraries (${Name} hdidata)
	target_link_libraries (${Name} hdivisualization)
	target_link_libraries (${Name} hdiutils)
	target_link_libraries (${Name} Qt5::Widgets)
	target_link_libraries (${Name} Qt5::OpenGL)
	target_link_libraries (${Name} Qt5::WebKit)
	target_link_libraries (${Name} Qt5::WebKitWidgets)

	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
		target_link_libraries (${Name} Opengl32.lib)
		target_link_libraries (${Name} "$ENV{FLANN_DIR}/lib/flann_cpp_s.lib")
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
		target_link_libraries(${Name} ${OPENGL_LIBRARIES})
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

	MESSAGE( STATUS "HSNE CUDA development project: " ${Name} )
        #MESSAGE( STATUS "            Source Files: " ${Sources} )
        #MESSAGE( STATUS "            Moc Source Files: " ${MocSources} )

	set_target_properties(${Name} PROPERTIES FOLDER "Applications/Hierarchical SNE/Development")
ENDMACRO()

MACRO(ADD_PROJECT_PAN Name Sources MocSources)
MESSAGE( STATUS "##################################")
	MESSAGE( STATUS "$ENV{PAN_DIR}include/pan/")
	include_directories("$ENV{PAN_DIR}include/pan")
	include_directories("$ENV{PAN_DIR}include/gsl")
	include_directories("$ENV{PAN_DIR}include/")

        add_executable (${Name} ${Sources} ${MocSources})

	target_link_libraries (${Name} hdianalytics)
	target_link_libraries (${Name} hdidimensionalityreduction)
	target_link_libraries (${Name} hdiclustering)
	target_link_libraries (${Name} hdidata)
	target_link_libraries (${Name} hdivisualization)
	target_link_libraries (${Name} hdiutils)
        target_link_libraries (${Name} Qt5::Widgets)
        target_link_libraries (${Name} Qt5::OpenGL)
        target_link_libraries (${Name} Qt5::WebKit)
        target_link_libraries (${Name} Qt5::WebKitWidgets)

        target_link_libraries (${Name} "$ENV{PAN_DIR}/bin/libpanestimate.so")
        target_link_libraries (${Name} "$ENV{PAN_DIR}/bin/libpandconv.so")
        target_link_libraries (${Name} "$ENV{PAN_DIR}/bin/libpanforce.so")
        target_link_libraries (${Name} "$ENV{PAN_DIR}/bin/libpanlamp.so")
        target_link_libraries (${Name} "$ENV{PAN_DIR}/bin/libpanmath.so")
        target_link_libraries (${Name} "$ENV{PAN_DIR}/bin/libpanmetric.so")
        target_link_libraries (${Name} "$ENV{PAN_DIR}/bin/libpanuseful.so")
        target_link_libraries (${Name} "$ENV{PAN_DIR}/bin/libgsl.so")
        target_link_libraries (${Name} "$ENV{PAN_DIR}/bin/libgslcblas.so")
        qt5_use_modules(${Name} WebKitWidgets)
        IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
                target_link_libraries (${Name} Opengl32.lib)
                target_link_libraries (${Name} "$ENV{FLANN_DIR}/lib/flann_cpp_s.lib")
        ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
        IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
                target_link_libraries(${Name} ${OPENGL_LIBRARIES})
        ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

	MESSAGE( STATUS "HSNE PAN development project: " ${Name} )
        #MESSAGE( STATUS "            Source Files: " ${Sources} )
        #MESSAGE( STATUS "            Moc Source Files: " ${MocSources} )

        set_target_properties(${Name} PROPERTIES FOLDER "Applications/Hierarchical SNE/Development")
ENDMACRO()

############################################################################################

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

include_directories ("${CMAKE_SOURCE_DIR}")
include_directories ("${CMAKE_CURRENT_BINARY_DIR}/../../../hdi/visualization")

set(CMAKE_INCLUDE_CURRENT_DIR ON)
find_package(Qt5Widgets REQUIRED)
find_package(Qt5OpenGL REQUIRED)
find_package(Qt5WebKit REQUIRED)
IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	find_package(OpenGL REQUIRED)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

if(APPLE)
else(APPLE)
    find_package(OpenMP REQUIRED)
    if (OPENMP_FOUND)
        message (STATUS "OpenMP found")
        set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    endif()
endif(APPLE)


file(GLOB VisualizationQObjHeaderFiles ${CMAKE_SOURCE_DIR}/hdi/visualization/*qobj.h)
file(GLOB AnalyticsQObjHeaderFiles ${CMAKE_SOURCE_DIR}/hdi/analytics/*qobj.h)
qt5_wrap_cpp(MocSources ${AnalyticsQObjHeaderFiles} ${VisualizationQObjHeaderFiles})

ADD_PROJECT(L_05_MNIST_Random_walks L_05_MNIST_Random_walks.cpp "${MocSources}")
ADD_PROJECT(L_07_MNIST_Multiscale_Random_walks L_07_MNIST_Multiscale_Random_walks.cpp "${MocSources}")
ADD_PROJECT(L_08_MNIST_Sampling L_08_MNIST_Sampling.cpp "${MocSources}")
ADD_PROJECT(L_09_CyTOF L_09_CyTOF.cpp "${MocSources}")
ADD_PROJECT(L_09_CyTOF_tSNE_Random L_09_CyTOF_tSNE_Random.cpp "${MocSources}")
ADD_PROJECT(L_10_DeepLearning_tSNE L_10_DeepLearning_tSNE.cpp "${MocSources}")
ADD_PROJECT(L_11_DeepLearning_MS_SNE L_11_DeepLearning_MS_SNE.cpp "${MocSources}")
ADD_PROJECT(L_12_DeepLearning_MS_SNE_Multilayer L_12_DeepLearning_MS_SNE_Multilayer.cpp "${MocSources}")
ADD_PROJECT(L_13_DeepLearning_MS_SNE_Multilayer_System L_13_DeepLearning_MS_SNE_Multilayer_System.cpp "${MocSources}")
ADD_PROJECT(L_14_MNIST_MS_SNE_Multilayer_System L_14_MNIST_MS_SNE_Multilayer_System.cpp "${MocSources}")
ADD_PROJECT(L_15_CyTOF_cluster_analysis L_15_CyTOF_cluster_analysis.cpp "${MocSources}")
ADD_PROJECT(L_15_CyTOF_detailed_cluster_analysis L_15_CyTOF_detailed_cluster_analysis.cpp "${MocSources}")
ADD_PROJECT(L_16_TIMIT L_16_TIMIT.cpp "${MocSources}")
ADD_PROJECT(L_17_NORB L_17_NORB.cpp "${MocSources}")
ADD_PROJECT(L_19_HumanGenes L_19_HumanGenes.cpp "${MocSources}")
ADD_PROJECT(L_20_Perfusion L_20_Perfusion.cpp "${MocSources}")
ADD_PROJECT(L_21_Sun L_21_Sun.cpp "${MocSources}")
ADD_PROJECT(L_22_DeepLearning_Images L_22_DeepLearning_Images.cpp "${MocSources}")


ADD_PROJECT(cluster_tree_mnist cluster_tree_mnist.cpp "${MocSources}")
ADD_PROJECT(pablo pablo.cpp "${MocSources}")
ADD_PROJECT(test_IO_MNIST test_IO_MNIST.cpp "${MocSources}")
ADD_PROJECT(test_hsne_analytics_system_mnist test_hsne_analytics_system_mnist.cpp "${MocSources}")


#Experiments for the Hierarchical-SNE paper
ADD_PROJECT(exp_mnist_bhtsne exp_mnist_bhtsne.cpp "${MocSources}")
ADD_PROJECT(exp_mnist_multilayer exp_mnist_multilayer.cpp "${MocSources}")
ADD_PROJECT(exp_mnist_approx exp_mnist_approx.cpp "${MocSources}")
ADD_PROJECT(exp_mnist_hsne_full exp_mnist_hsne_full.cpp "${MocSources}")
ADD_PROJECT(exp_mnist_pex exp_mnist_pex.cpp "${MocSources}")
#ADD_PROJECT_PAN(exp_mnist_lamp exp_mnist_lamp.cpp "${MocSources}")

ADD_PROJECT(exp_cifar_bhtsne exp_cifar_bhtsne.cpp "${MocSources}")
ADD_PROJECT(exp_cifar_multilayer exp_cifar_multilayer.cpp "${MocSources}")
ADD_PROJECT(exp_cifar_approx exp_cifar_approx.cpp "${MocSources}")
ADD_PROJECT(exp_cifar_hsne_full exp_cifar_hsne_full.cpp "${MocSources}")
ADD_PROJECT(exp_cifar_pex exp_cifar_pex.cpp "${MocSources}")
ADD_PROJECT(exp_cifar_lsne exp_cifar_lsne.cpp "${MocSources}")
#ADD_PROJECT_PAN(exp_cifar_lamp exp_cifar_lamp.cpp "${MocSources}")

ADD_PROJECT(exp_timit_bhtsne exp_timit_bhtsne.cpp "${MocSources}")
ADD_PROJECT(exp_timit_multilayer exp_timit_multilayer.cpp "${MocSources}")
ADD_PROJECT(exp_timit_hsne_full exp_timit_hsne_full.cpp "${MocSources}")
ADD_PROJECT(exp_timit_pex exp_timit_pex.cpp "${MocSources}")
#ADD_PROJECT_PAN(exp_timit_lamp exp_timit_lamp.cpp "${MocSources}")
