MACRO(ADD_PROJECT Name Sources MocSources)
        #MESSAGE( STATUS "${MocSources}")
	add_executable (${Name} ${Sources} ${MocSources})  

    target_link_libraries (${Name} hdianalytics)
    target_link_libraries (${Name} hdidimensionalityreduction)
    target_link_libraries (${Name} hdiclustering)
    target_link_libraries (${Name} hdidata)
    target_link_libraries (${Name} hdivisualization)
    target_link_libraries (${Name} hdiutils)
    target_link_libraries (${Name} Qt5::Widgets)
    target_link_libraries (${Name} Qt5::OpenGL)
    target_link_libraries (${Name} Qt5::WebKit)
    target_link_libraries (${Name} Qt5::WebKitWidgets)
	qt5_use_modules(${Name} WebKitWidgets)
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
		target_link_libraries (${Name} Opengl32.lib)
		target_link_libraries (${Name} "$ENV{FLANN_DIR}/lib/flann_cpp_s.lib")
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
		target_link_libraries(${Name} ${OPENGL_LIBRARIES})
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

	MESSAGE( STATUS "Visual Test project: " ${Name} )
        #MESSAGE( STATUS "            Source Files: " ${Sources} )
        #MESSAGE( STATUS "            Moc Source Files: " ${MocSources} )

    set_target_properties(${Name} PROPERTIES FOLDER "Applications/Visual Test")
ENDMACRO()

MACRO(ADD_CUDA_PROJECT Name Sources MocSources)
	CUDA_ADD_EXECUTABLE (${Name} ${Sources} ${MocSources})  

    target_link_libraries (${Name} hdianalytics)
    target_link_libraries (${Name} hdidimensionalityreduction)
    target_link_libraries (${Name} hdidata)
    target_link_libraries (${Name} hdivisualization)
    target_link_libraries (${Name} hdiutils)
    target_link_libraries (${Name} Qt5::Widgets)
    target_link_libraries (${Name} Qt5::OpenGL)
    target_link_libraries (${Name} Qt5::WebKit)
    target_link_libraries (${Name} Qt5::WebKitWidgets)

	IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
		target_link_libraries (${Name} Opengl32.lib)
		target_link_libraries (${Name} "$ENV{FLANN_DIR}/lib/flann_cpp_s.lib")
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
		target_link_libraries(${Name} ${OPENGL_LIBRARIES})
	ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

	MESSAGE( STATUS "Visual Test project: " ${Name} )
        #MESSAGE( STATUS "            Source Files: " ${Sources} )
        #MESSAGE( STATUS "            Moc Source Files: " ${MocSources} )

    set_target_properties(${Name} PROPERTIES FOLDER "Applications/Visual Test")
ENDMACRO()


############################################################################################

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

include_directories ("${CMAKE_SOURCE_DIR}")
include_directories ("${CMAKE_CURRENT_BINARY_DIR}/../../hdi/visualization")

set(CMAKE_INCLUDE_CURRENT_DIR ON)
find_package(Qt5Widgets REQUIRED)
find_package(Qt5OpenGL REQUIRED)
find_package(Qt5WebKit REQUIRED)
IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	find_package(OpenGL REQUIRED)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")

if(APPLE)
else(APPLE)
    find_package(OpenMP REQUIRED)
    if (OPENMP_FOUND)
        message (STATUS "OpenMP found")
        set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
        set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    endif()
endif(APPLE)


file(GLOB VisualizationQObjHeaderFiles ${CMAKE_SOURCE_DIR}/hdi/visualization/*qobj.h)
file(GLOB AnalyticsQObjHeaderFiles ${CMAKE_SOURCE_DIR}/hdi/analytics/*qobj.h)
qt5_wrap_cpp(MocSources ${AnalyticsQObjHeaderFiles} ${VisualizationQObjHeaderFiles})
qt5_add_resources(Resources "../shared_resources/shared_resources.qrc")

ADD_PROJECT(tsne_line tsne_line.cpp "${MocSources};${Resources}")
ADD_PROJECT(data_viewers data_viewers.cpp "${MocSources};${Resources}")
ADD_PROJECT(scatterplot_drawers scatterplot_drawers.cpp "${MocSources};${Resources}")
ADD_PROJECT(test_sankey_diagram test_sankey_diagram.cpp "${MocSources};${Resources}")
ADD_PROJECT(test_sankey_diagram_colors test_sankey_diagram_colors.cpp "${MocSources};${Resources}")
ADD_PROJECT(kmeans kmeans.cpp "${MocSources};${Resources}")
ADD_PROJECT(test_bh_sne test_bh_sne.cpp "${MocSources};${Resources}")
ADD_PROJECT(test_bh_sne_vs_exact test_bh_sne_vs_exact.cpp "${MocSources};${Resources}")
ADD_PROJECT(wtsne_mnist wtsne_mnist.cpp "${MocSources};${Resources}")
ADD_PROJECT(wtsne_mnist_exact_vs_bh wtsne_mnist_exact_vs_bh.cpp "${MocSources};${Resources}")
ADD_PROJECT(heatmap_view_test heatmap_view_test.cpp "${MocSources};${Resources}")
ADD_PROJECT(linechart_view_test linechart_view_test.cpp "${MocSources};${Resources}")
ADD_PROJECT(linechart_dual_view_test linechart_dual_view_test.cpp "${MocSources};${Resources}")
ADD_PROJECT(histogram_view_test histogram_view_test.cpp "${MocSources};${Resources}")
ADD_PROJECT(histogram_zcent_view_test histogram_zcent_view_test.cpp "${MocSources};${Resources}")
ADD_PROJECT(branching branching.cpp "${MocSources};${Resources}")
ADD_PROJECT(pca_image pca_image.cpp "${MocSources};${Resources}")
ADD_PROJECT(pca_mnist pca_mnist.cpp "${MocSources};${Resources}")
ADD_PROJECT(pca_weigh_image pca_weigh_image.cpp "${MocSources};${Resources}")
ADD_PROJECT(lda_image lda_image.cpp "${MocSources};${Resources}")
ADD_PROJECT(dl_filter_viz_test dl_filter_viz_test.cpp "${MocSources};${Resources}")
